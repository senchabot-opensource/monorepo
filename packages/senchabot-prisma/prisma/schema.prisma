// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    //url      = "file:dev.db"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model SignActivities {
    id    Int      @id @default(autoincrement())
    email String
    date  DateTime @default(now())
}

model BotJoinActivities {
    id                Int      @id @default(autoincrement())
    botPlatformType   String   @map("bot_platform_type")
    discordServerId   String   @map("discord_server_id")
    discordServerName String   @map("discord_server_name")
    twitchChannelId   String   @map("twitch_channel_id")
    twitchChannelName String   @map("twitch_channel_name")
    date              DateTime @default(now())

    @@map("bot_join_activities")
}

model BotActionActivities {
    id              Int      @id @default(autoincrement())
    botPlatformType String   @map("bot_platform_type")
    botActivity     String   @map("bot_activity")
    activityDate    DateTime @default(now()) @map("activity_date")
    discordServerId String?  @map("discord_server_id")
    twitchChannelId String?  @map("twitch_channel_id")
    activityAuthor  String?  @map("activity_author")

    @@map("bot_action_activities")
}

model DiscordAnnouncementChannels {
    id            Int            @id @default(autoincrement())
    channelId     String         @unique @map("channel_id")
    serverId      String         @map("server_id")
    createdBy     String         @map("created_by")
    createdAt     DateTime       @default(now()) @map("created_at")
    discordServer DiscordServer? @relation(fields: [serverId], references: [serverId], onDelete: Cascade)

    @@map("discord_announcement_channels")
}

model BotCommands {
    id              Int      @id @default(autoincrement())
    commandName     String   @map("command_name")
    commandContent  String   @map("command_content") @db.Text
    twitchChannelId String?  @map("twitch_channel_id")
    discordServerId String?  @map("discord_server_id")
    createdBy       String?  @map("created_by")
    updatedBy       String?  @map("updated_by")
    createdAt       DateTime @default(now()) @map("created_at")

    @@unique([commandName, twitchChannelId])
    @@map("bot_commands")
}

model BotCommandAliases {
    id              Int      @id @default(autoincrement())
    commandAlias    String   @map("command_alias")
    commandName     String   @map("command_name")
    twitchChannelId String?  @map("twitch_channel_id")
    discordServerId String?  @map("discord_server_id")
    createdBy       String   @map("created_by")
    createdAt       DateTime @default(now()) @map("created_at")

    @@map("bot_command_aliases")
}

model DiscordServer {
    id                          String                        @id @default(cuid())
    serverId                    String                        @unique @map("server_id")
    serverName                  String                        @map("server_name")
    serverOwner                 String                        @map("server_owner")
    userId                      String?                       @map("user_id")
    user                        User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
    DiscordAnnouncementChannels DiscordAnnouncementChannels[]

    @@map("discord_servers")
}

model TwitchChannel {
    id          Int     @id @default(autoincrement())
    channelId   String  @unique @map("channel_id")
    channelName String  @map("channel_name")
    userId      String? @map("user_id")
    user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("twitch_channels")
}

model TwitchBotConfigs {
    id              Int      @id @default(autoincrement())
    key             String   @map("config_key")
    value           String   @map("config_value")
    twitchChannelId String   @map("twitch_channel_id")
    userId          String?  @map("user_id")
    user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt       DateTime @default(now()) @map("created_at")

    @@unique([key, twitchChannelId])
    @@map("twitch_bot_configs")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    DiscordServer    DiscordServer[]
    TwitchChannel    TwitchChannel[]
    TwitchBotConfigs TwitchBotConfigs[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
